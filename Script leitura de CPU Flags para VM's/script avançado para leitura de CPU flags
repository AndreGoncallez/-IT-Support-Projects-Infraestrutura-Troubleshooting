# Verifica se o script est√° sendo executado como Administrador
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "[‚ùå] Por favor, execute como Administrador!" -ForegroundColor Red
    exit
}

Write-Host "`nüîç Verificando suporte √† virtualiza√ß√£o via CPU flags..." -ForegroundColor Cyan

# Coleta os dados da CPU via Win32_Processor
$cpu = Get-WmiObject Win32_Processor

# Mostra algumas flags relevantes
Write-Host "`n[üß†] Nome do processador: $($cpu.Name)"
Write-Host "[üß©] Flags de virtualiza√ß√£o:"

# Verifica se suporta VMX
if ($cpu.VirtualizationFirmwareEnabled -eq $true) {
    Write-Host "[‚úÖ] Virtualization Firmware: Ativado na BIOS"
} else {
    Write-Host "[‚ùå] Virtualization Firmware: DESATIVADO ou n√£o vis√≠vel pelo sistema" -ForegroundColor Yellow
}

# Verifica se est√° rodando sob um Hypervisor
if ($cpu.SecondLevelAddressTranslationExtensions -eq $true) {
    Write-Host "[‚úÖ] SLAT (EPT): Suportado"
} else {
    Write-Host "[‚ùå] SLAT (EPT): N√£o suportado ou n√£o vis√≠vel" -ForegroundColor Yellow
}

# Adicional - Verifica se est√° rodando sob ambiente virtual
$isVirtual = Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty Model
if ($isVirtual -match "VMware") {
    Write-Host "[‚ÑπÔ∏è] Esta m√°quina est√° rodando dentro do VMware."
}

Write-Host "`n[‚úîÔ∏è] Diagn√≥stico conclu√≠do."
